3 Types of data
1. Structured - Tables, SQL, Excel
2. Unstructured - Text, Images, Audio, Video
3. Semi-Structured - JSON, XML


NoSQL
- Key value 
- Column Oriented
- Document based - MongoDB
- Graph Based

MongoDB
- Schema-less
- Document oriented
- best for handeling big data
- supports scaling - vertical and horizontal
- supports capped collections
- supports indexing

MongoDB Features
- no pre-defined Schema
- we can create fields on fly
- Replication and Sharding



Tables - Collections -> documents

users = [
    {
        id: 101,
        name: "x",
        email: "x@gmail.com"
    },
    {
        id: 102,
        name: "y",
        email: "y@gmail.com",
        gender: "male",
        age: 20
    }
]

Arguments we can pass while creating a collection
db.createCollection(name, 
{capped: <boolean>, autoIndexId: <boolean>, size:<number> max: <number>},
validationLevel: <string>, writeConcern: <document>,
storageEngine:<document>
)


Capped Collections
- if we want to restrict number of documents in our collection
- or if want to restrict memory of data in our collection

db.createCollection(name, options)
Options
- capped - True/False
- size - max size in bytes
- max - max number of documents allowed in collection
- AutoIndexId - automatically create index on ID field


staff
[
    {
        name: "Ramesh",
        email: "ramesh2@gmail.com",
        gender: "male"
    },
    {
        name: "Namit",
        email: "namit11@gmail.com",
        gender: "male"
    },
    {
        name: "Pooja",
        email: "pooja55@gmail.com",
        gender: "female"
    },
    {
        name: "Era",
        email: "era12@gmail.com",
        gender: "female"
    },
    {
        name: "Deepak",
        email: "deepak00@gmail.com",
        gender: "male"
    },
]
==========================

CRUD Operations
- Create
  - insertOne
  - insertMany
- Read
  - find
  - findOne
- Update
  - updateOne
  - updateMany
  - findOneAndUpdate
- Delete
  - deleteOne
  - deleteMany

Filter data
db.staff.find({gender:"male"});

Projection
- show specific key value pair
db.staff.find({gender:"male"}, {name:1, gender:1, _id:0});

Update Query
db.staff.updateOne({name: "Amit"}, {$set: {email: "amit1234@gmail.com"}})

Delete Query
db.staff.deleteOne({name: "John"});

Clear Collection
db.staff.deleteMany({});

Drop Collection
db.staff.drop();

=====================

Operators in MongoDB

Projection Operators
- $
- $elemMatch
- $meta
- $slice

Comparison Operators
- $eq
- $gt
- $gte
- $lt
- $lte
- $ne
- $in
- $nin

Logical Operators
- $and
- $or
- $not
- $nor

Element Query Operator
- $exists

Evaluation Operator
- $expr
- $regex
- $text

- $type

Array Operations
- $size
- $all
- $elemMatch
- $push
- $pop
- $pull
- $pullAll
- $slice
- $each
- $addToSet
- $sort
- $position


[
    {
      team_id: "team_01",
      team_name: "RCB",
      no_of_emp: 2,
      emp_data: [
        {emp_id: "EMP_101", emp_name: "Virat Kohli", emp_skills: ["Python", "Java"]},
        {emp_id: "EMP_109", emp_name: "ABD", emp_skills: ["MySQL", "Java", "Spring"]}
      ]
    },
    {
      team_id: "team_02",
      team_name: "CSK",
      no_of_emp: 3,
      emp_data: [
        {emp_id: "EMP_102", emp_name: "MS Dhoni", emp_skills: ["Python", "Django", "SQL"]},
        {emp_id: "EMP_110", emp_name: "Suresh Raina", emp_skills: ["MySQL", "Java", "Angular"]},
        {emp_id: "EMP_108", emp_name: "R Ashwin", emp_skills: ["MySQL", "Angular"]}
      ]
    },
    {
      team_id: "team_03",
      team_name: "MI",
      no_of_emp: 3,
      emp_data: [
        {emp_id: "EMP_145", emp_name: "Rohit Sharma", emp_skills: ["Python", "Django", "SQL"]},
        {emp_id: "EMP_010", emp_name: "Sachin Tendulkar", emp_skills: ["C++", "Java", "Angular"]},
        {emp_id: "EMP_119", emp_name: "Surya", emp_skills: ["React", "Angular", "Vue"]}
      ]
    },
    {
      team_id: "team_04",
      team_name: "LSG",
      no_of_emp: 2,
      emp_data: [
        {emp_id: "EMP_115", emp_name: "KL Rahul", emp_skills: ["Python", "Django", "MongoDB"]},
        {emp_id: "EMP_110", emp_name: "Rishabh Pant", emp_skills: ["Java", "React", "MySQL"]}
      ]
    },
  ]


Querys for Operators
db.teams.find({team_name : {$eq: "LSG"}});
db.teams.find({team_name : {$ne: "LSG"}});
db.teams.find({no_of_emp : {$gt: 2}});
db.teams.find({no_of_emp : {$lt: 2}});
db.teams.find({no_of_emp : {$gte: 2}});
db.teams.find({no_of_emp : {$lte: 2}});

// will return documents having no_of_emp 2 or 4 or 6 or 8
db.teams.find({no_of_emp : {$in : [2,4,6,8]}})
db.teams.find({no_of_emp : {$nin : [2,4,6,8]}})

db.teams.find({$or : [{no_of_emp : 2}, {no_of_emp : 4}, {no_of_emp : 6}, {no_of_emp : 8}]})

db.teams.find({$and : [{no_of_emp : 2}, {"emp_data.emp_skills" : "Python"}]})

db.teams.find({$and : [{"emp_data.emp_skills" : "Python"}, {no_of_emp : {$gt: 2}}]});

db.teams.find({$or : [{no_of_emp : 2}, {"emp_data.emp_skills" : "Python"}]})

